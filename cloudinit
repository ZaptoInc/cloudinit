#!/bin/bash

# Importing variables config
source "/etc/cloudinit/variables.sh"

# Global variables
export CI_INTERACTIVE=0
export CI_ON_BOOT=0
export CI_START=0
usage() {
    echo ""
    echo "Usage: $0 --name <VM_name> --ip <ip_address> [--option]"
    echo "  --id            ID of the VM (Default: automatically choose the first available ID)"
    echo "  --cpu           CPU count (Default: $CI_CPU)"
    echo "  --name          VM name (Default: $CI_VM_NAME)"
    echo "  --ram           RAM size un MB (Default: $CI_RAM)"
    echo "  --disk          disk size (Default: $CI_DISK)"
    echo "  --cidr          CIDR of the network (Default: $CI_CIDR)"
    echo "  --ip            IP Address used for networking (Required unless interactive)"
    echo "  --gateway       IP address of the gateway (Default: $CI_GATEWAY)"
    echo "  --dns           IP address of the DNS servers (Defaut: $CI_DNS)"
    echo "  --os            Operating system used on for the VM (Defaut: $CI_OS)"
    echo "  --listos        List the available operating systems"
    echo "  --rp            Root password (Default: $CI_ROOT_PASSWORD)"
    echo "  --user          Username (Defaut: $CI_USER_NAME)"
    echo "  --up            User password (Defaut: $CI_USER_PASSWORD)"
    echo "  --onboot        Start with Proxmox (Defaut: Disabled)"
    echo "  --start         Start the VM (Defaut: Disabled)"
    echo "  --backup        Put the VM in a backup procedure (Defaut: Disabled)"
    echo "  --backupid      ID of the backup procedure (Required if backup enabled)"
    echo "  --listbackupids Lists all the backup procedures"
    echo "  --interactive   Interactive mode"
    exit 1
}

installJq() {
    # Verifies if jq is not installed
if ! command -v jq &> /dev/null; then
    echo "jq is not installed. Installing jq..."
    apt-get update -y > /dev/null
    apt-get install jq -y > /dev/null
   

    # Vérifie si l'installation a réussi
    if command -v jq &> /dev/null; then
        echo "jq was installed successfully!"
    else
        echo "jq installation failed, please cheq manually"
        exit 1
    fi
fi
}

listBackupIds() {
    installJq
    echo "Backup procedure available:"
    echo "$(pvesh get /cluster/backup --output-format json | jq -r '.[] | "\(.id): \(.comment // "No comment.")"')"
}

CI_SCRIPTS_VAR=("$CI_SCRIPTS"/*.sh)

listOS() {
    for i in "${!CI_SCRIPTS_VAR[@]}"; do
        CI_FILE_NAME=$(basename "${CI_SCRIPTS_VAR[$i]}" .sh)
        echo "$((i + 1))) $CI_FILE_NAME"
    done
}

# Parsing des arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        --id) CI_VM_ID="$2"; shift 2 ;;
        --name) CI_VM_NAME="$2"; shift 2 ;;
        --cpu) CI_CPU="$2"; shift 2 ;;
        --ram) CI_RAM="$2"; shift 2 ;;
        --disk) CI_DISK="$2"; shift 2 ;;
        --cidr) $CI_CIDR="$2"; shift 2 ;;
        --ip) CI_IP_ADDRESS="$2/$CIDR"; shift 2 ;;
        --gateway) CI_GATEWAY="$2"; shift 2 ;;
        --dns) CI_DNS="$2"; shift 2 ;;
        --os) CI_OS="$2"; shift 2 ;;
        --listos) listOS; exit 1; shift;;
        --rp) CI_ROOT_PASSWORD="$2"; shift 2 ;;
        --user) CI_USER_NAME="$2"; shift 2 ;;
        --up) CI_USER_PASSWORD="$2"; shift 2 ;;
        --interactive) CI_INTERACTIVE=1; shift ;;
        --onboot) CI_ON_BOOT=1; shift ;;
        --start) CI_START=1; shift ;;
        --backup) CI_BACKUP=1; shift; installJq ;;
        --backupid) CI_BACKUP_ID="$2"; shift 2 ;;
        --listbackupids) listBackupIds; exit 1; shift;;
        --) shift; break ;;
        *) usage;
    esac
done

# Defaults to the next available id in Proxmox
CI_VM_ID="${CI_VM_ID:-$(pvesh get /cluster/nextid)}"

interactiveStep1() {
    read -p "What ID would you like to give to the VM? (currently $CI_VM_ID) >" CI_CHOICE
    CI_VM_ID=${CI_CHOICE:-$CI_VM_ID}
}

interactiveStep2() {
    read -p "What name would you like to give to the VM? (Currently $CI_VM_NAME) >" CI_CHOICE
    CI_VM_NAME=${CI_CHOICE:-$CI_VM_NAME}
}

interactiveStep3() {
    echo "What OS would you like to use on the VM?"
    listOS
    echo "0) Cancel"
    echo
    read -p ">" CI_CHOICE
    if [[ "$CI_CHOICE" == "0" ]]; then
        echo "Cancelled."
        exit 0
    elif [[ "$CI_CHOICE" =~ ^[0-9]+$ ]] && (( CI_CHOICE >= 1 && CI_CHOICE <= ${#CI_SCRIPTS_VAR[@]} )); then
        CI_OS_SCRIPT="${CI_SCRIPTS_VAR[$((CI_CHOICE - 1))]}"
    else
        echo "Invalid choice."
        interactiveStep3
    fi
}

interactiveMode() {
    interactiveStep1
    interactiveStep2
    interactiveStep3
    echo "CI_VM_ID: $CI_VM_ID"
    echo "CI_VM_NAME: $CI_VM_NAME"
    echo "CI_OS_SCRIPT: $CI_OS_SCRIPT"
    exit 0
}

if [[ $INTERACTIVE -eq 1 ]]; then
    interactiveMode
else

fi

echo "What OS would you like to use?"
echo

# Show the menu
for i in "${!CI_SCRIPTS_VAR[@]}"; do
    CI_FILE_NAME=$(basename "${CI_SCRIPTS_VAR[$i]}" .sh)
    echo "$((i + 1))) $CI_FILE_NAME"
done

echo "0) Cancel"
echo
read -p "> " CI_CHOICE

# Gérer le choix
if [[ "$CI_CHOICE" == "0" ]]; then
    echo "Cancelled."
    exit 0
elif [[ "$CI_CHOICE" =~ ^[0-9]+$ ]] && (( CI_CHOICE >= 1 && CI_CHOICE <= ${#CI_SCRIPTS_VAR[@]} )); then
    CI_SCRIPT="${CI_SCRIPTS_VAR[$((CI_CHOICE - 1))]}"
    echo "Starting $CI_SCRIPT..."
    bash "$CI_SCRIPT"
else
    echo "Invalid choice."
    exit 1
fi

echo "TODO"